{"version":3,"sources":["retailrocket.segmentator.js"],"names":["_typeof","Symbol","iterator","obj","constructor","root","factory","define","amd","document","retailrocket","segmentator","this","getCookie","name","cookies","cookie","split","segments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","value","x","substr","indexOf","y","replace","decodeURIComponent","e","err","setCookie","expirationInSeconds","path","arguments","length","domain","cookieValue","encodeURIComponent","expirationDate","Date","setSeconds","getSeconds","toUTCString","daysToSeconds","days","randomInt","min","max","Math","floor","random","defaultVisitorSegmentRecordCookieName","getVisitorSegment","options","visitorSegmentCookie","splitName","visitorSegmentRecord","expireInDay","visitorSegment","parseInt"],"mappings":"AAAA,YAEA,IAAIA,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,KAEzO,SAAWE,EAAMC,GACO,kBAAVC,SAAgD,WAAxBP,QAAQO,OAAOC,MAAqBD,OAAOC,IAC1ED,QAAQ,4BAA6BD,KACkC,YAA/C,mBAATD,GAAuB,YAAcL,QAAQK,KAAkD,WAA3BL,QAAQK,EAAKI,YAChGJ,EAAKK,aAAeL,EAAKK,iBACzBL,EAAKK,aAAaC,YAAcL,MAErCM,KAAM,WAUL,QAASC,GAAUC,GACf,GAAIC,GAAUN,SAASO,OAAOC,MAAM,KAChCC,EAAW,KAEXC,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KACI,IAAK,GAA4CC,GAAxCC,EAAYT,EAAQd,OAAOC,cAAsBiB,GAA6BI,EAAQC,EAAUC,QAAQC,MAAOP,GAA4B,EAAM,CACtJ,GAAIH,GAASO,EAAMI,MAEfC,EAAIZ,EAAOa,OAAO,EAAGb,EAAOc,QAAQ,MACpCC,EAAIf,EAAOa,OAAOb,EAAOc,QAAQ,KAAO,EAE5C,IADAF,EAAIA,EAAEI,QAAQ,aAAc,IACxBJ,GAAKd,EACL,IACII,EAAWe,mBAAmBF,EAC9B,OACF,MAAOG,GACLhB,EAAW,OAIzB,MAAOiB,GACLf,GAAoB,EACpBC,EAAiBc,EACnB,QACE,KACShB,GAA6BK,EAAAA,WAC9BA,EAAAA,YAEN,QACE,GAAIJ,EACA,KAAMC,IAKlB,MAAOH,GAYX,QAASkB,GAAUtB,EAAMa,EAAOU,GAC5B,GAAIC,GAAOC,UAAUC,QAAU,GAAsBlB,SAAjBiB,UAAU,GAAmB,IAAMA,UAAU,GAC7EE,EAASF,UAAU,GAEnBG,EAAcC,mBAAmBhB,GACjCiB,EAAiB,GAAIC,KACzBD,GAAeE,WAAWF,EAAeG,aAAeV,GAE7B,MAAvBA,IACAK,GAAe,aAAeE,EAAeI,eAGjDN,EAAcA,EAAc,SAAWJ,EAEnCG,IACAC,EAAcA,EAAc,YAAcD,GAG9ChC,SAASO,OAASF,EAAO,IAAM4B,EASnC,QAASO,GAAcC,GACnB,MAAc,IAAPA,EAAY,GAAK,GAU5B,QAASC,GAAUC,EAAKC,GACpB,MAAOC,MAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAlGzD,GAAIK,GAAwC,mBAqG5C,QAaIC,kBAAmB,SAA2BxC,GAC1C,GAAIyC,GAAUpB,UAAUC,QAAU,GAAsBlB,SAAjBiB,UAAU,MAAwBA,UAAU,GAE/EqB,EAAuBH,CACvBE,GAAQE,YACRD,EAAuBA,EAAuB,IAAMD,EAAQE,UAGhE,IAAIC,GAAuBjD,EAAU+C,EAChCE,IAAwBA,EAAqB7C,MAAM,KAAK,IAAMC,IAC/D4C,EAAuB5C,EAAW,IAAMiC,EAAU,EAAGjC,IAGzDkB,EAAUwB,EAAsBE,EAAsBb,EAAcU,EAAQI,aAAe,IAAKJ,EAAQrB,MAAQ,IAAKqB,EAAQlB,OAE7H,IAAIuB,GAAiBF,EAAqB7C,MAAM,KAAK,EACrD,OAAOgD,UAASD,EAAgB","file":"retailrocket.segmentator.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n;(function (root, factory) {\n    if (typeof define == 'function' && _typeof(define.amd) === 'object' && define.amd) {\n        define(['retailrocket.segmentator'], factory());\n    } else if ((typeof root === 'undefined' ? 'undefined' : _typeof(root)) === 'object' && _typeof(root.document) === 'object') {\n        root.retailrocket = root.retailrocket || {};\n        root.retailrocket.segmentator = factory();\n    }\n})(this, function () {\n    /** @const {String} */\n    var defaultVisitorSegmentRecordCookieName = 'rr-VisitorSegment';\n\n    /**\n     * Получение значения cookie\n     *\n     * @param {String} name Название\n     * @returns {null|String} Значение или null\n     */\n    function getCookie(name) {\n        var cookies = document.cookie.split(';');\n        var segments = null;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cookies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var cookie = _step.value;\n\n                var x = cookie.substr(0, cookie.indexOf('='));\n                var y = cookie.substr(cookie.indexOf('=') + 1);\n                x = x.replace(/^\\s+|\\s+$/g, '');\n                if (x == name) {\n                    try {\n                        segments = decodeURIComponent(y);\n                        break;\n                    } catch (e) {\n                        segments = null;\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return segments;\n    }\n\n    /**\n     * Установка cookie\n     *\n     * @param {String} name Название\n     * @param {String} value Значение\n     * @param {Number} expirationInSeconds Время жизни в секундах\n     * @param {String} path Путь\n     * @param {String} domain Домен\n     */\n    function setCookie(name, value, expirationInSeconds) {\n        var path = arguments.length <= 3 || arguments[3] === undefined ? '/' : arguments[3];\n        var domain = arguments[4];\n\n        var cookieValue = encodeURIComponent(value);\n        var expirationDate = new Date();\n        expirationDate.setSeconds(expirationDate.getSeconds() + expirationInSeconds);\n\n        if (expirationInSeconds != null) {\n            cookieValue += \"; expires=\" + expirationDate.toUTCString();\n        }\n\n        cookieValue = cookieValue + ';path=' + path;\n\n        if (domain) {\n            cookieValue = cookieValue + '; domain=' + domain;\n        }\n\n        document.cookie = name + '=' + cookieValue;\n    }\n\n    /**\n     * Хелпер для перевода дней в секунды\n     *\n     * @param {Number} days Количество дней\n     * @returns {Number} Количество секунд\n     */\n    function daysToSeconds(days) {\n        return days * 24 * 60 * 60;\n    }\n\n    /**\n     * Хелпер для генерация случайного числа между min и max\n     *\n     * @param {Number} min Минимальное значение\n     * @param {Number} max Максимальное значение\n     * @returns {Number} Случайное число\n     */\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    return {\n        /**\n         * Вычисляет, сохраняет в cookie и возвращает сегмент пользователя\n         *\n         * @param {Number} segments Количество сегментов\n         * @param {Object} options Параметры\n         * @param {String} options.splitName Название теста чтобы добавить в ключ cookie\n         * @param {Number} options.expireInDay=60 Cookie TTL\n         * @param {String} options.path='/' Cookie путь\n         * @param {String} options.domain Cookie домен\n         * @returns {NaN|Number} Сегмент пользователя\n         */\n\n        getVisitorSegment: function getVisitorSegment(segments) {\n            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n            var visitorSegmentCookie = defaultVisitorSegmentRecordCookieName;\n            if (options.splitName) {\n                visitorSegmentCookie = visitorSegmentCookie + '-' + options.splitName;\n            }\n\n            var visitorSegmentRecord = getCookie(visitorSegmentCookie);\n            if (!visitorSegmentRecord || visitorSegmentRecord.split(':')[0] != segments) {\n                visitorSegmentRecord = segments + ':' + randomInt(1, segments);\n            }\n\n            setCookie(visitorSegmentCookie, visitorSegmentRecord, daysToSeconds(options.expireInDay || 60), options.path || '/', options.domain);\n\n            var visitorSegment = visitorSegmentRecord.split(':')[1];\n            return parseInt(visitorSegment, 10);\n        }\n    };\n});"],"sourceRoot":"/source/"}